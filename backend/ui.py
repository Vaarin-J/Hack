"""
ui.py
Streamlit UI for the Kalshi Weather Bot that visualizes trading decisions and forecast data.
This UI reads from the live_data.json file generated by the main Pathway pipeline.
"""

import streamlit as st
import pandas as pd
import json
import time
from datetime import datetime
import os

# Set page config
st.set_page_config(
    page_title="Kalshi Weather Bot Demo",
    page_icon="🌡️",
    layout="wide"
)

# Constants
DATA_FILE_PATH = "./backend/live_data.jsonl"
REFRESH_INTERVAL = 2  # Seconds

def read_live_data():
    """Read the latest JSON object (last line) from the live_data.jsonl file"""
    try:
        if os.path.exists(DATA_FILE_PATH):
            with open(DATA_FILE_PATH, "r") as file:
                lines = file.readlines()
                if lines:
                    return json.loads(lines[-1].strip())
        return None
    except Exception as e:
        st.error(f"Error reading data: {e}")
        return None

def format_timestamp(timestamp_str):
    """Format timestamp string to a more readable format"""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return dt.strftime("%b %d, %Y %I:%M %p")
    except Exception:
        return timestamp_str

def get_all_data():
    """Return list of JSON objects from the live_data.jsonl file"""
    try:
        if os.path.exists(DATA_FILE_PATH):
            with open(DATA_FILE_PATH, "r") as file:
                return [json.loads(line) for line in file if line.strip()]
        return []
    except Exception as e:
        st.error(f"Error reading historical data: {e}")
        return []

# Title and description
st.title("🌡️ Kalshi Weather Trading Bot")
st.markdown("""
This demo showcases a real-time autonomous trading bot for the Kalshi prediction market.
The bot monitors weather forecasts for NYC and makes trading decisions based on temperature thresholds.
""")

# Create containers for dynamic updates
header_container = st.container()
metrics_container = st.container()
decision_container = st.container()
history_container = st.container()

# Main UI update loop
placeholder = st.empty()

# Run the app
while True:
    data = read_live_data()
    
    if data:
        with placeholder.container():
            # Header with current market info
            with header_container:
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader(f"Market: {data['ticker']}")
                    st.caption(f"Last Updated: {format_timestamp(data['timestamp'])}")
                
                with col2:
                    st.metric(
                        label="Current Forecast", 
                        value=f"{data['forecast_temp']}°F",
                        delta=f"{data['forecast_temp'] - 80.0:.1f}°F from threshold"
                    )
            
            # Key metrics
            with metrics_container:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Trading Side", data['side'])
                
                with col2:
                    # Color the conviction score based on value
                    conviction = data['conviction']
                    if conviction > 0.9:
                        st.markdown(f"<h3 style='color:green'>Conviction: {conviction:.2f}</h3>", unsafe_allow_html=True)
                    elif conviction > 0.7:
                        st.markdown(f"<h3 style='color:orange'>Conviction: {conviction:.2f}</h3>", unsafe_allow_html=True)
                    else:
                        st.markdown(f"<h3 style='color:red'>Conviction: {conviction:.2f}</h3>", unsafe_allow_html=True)
                
                with col3:
                    # Trading status
                    if conviction > 0.9:
                        st.success("TRADE EXECUTED")
                    else:
                        st.warning("MONITORING")
            
            # Agent reasoning
            with decision_container:
                st.subheader("Agent Reasoning")
                st.info(data['explanation'])
            
            # History table
            with history_container:
                st.subheader("Signal History")
                all_data = get_all_data()
                
                if all_data:
                    df = pd.DataFrame(all_data)
                    df['formatted_time'] = df['timestamp'].apply(format_timestamp)
                    df['trade_status'] = df['conviction'].apply(lambda x: "EXECUTED" if x > 0.9 else "SKIPPED")
                    
                    # Format and display the table
                    display_df = df[['formatted_time', 'forecast_temp', 'side', 'conviction', 'trade_status']]
                    display_df.columns = ['Time', 'Temp (°F)', 'Side', 'Conviction', 'Status']
                    
                    st.dataframe(
                        display_df,
                        use_container_width=True,
                        hide_index=True,
                    )
    else:
        st.info("Waiting for data from the pipeline... Make sure the Pathway pipeline is running.")
    
    time.sleep(REFRESH_INTERVAL)
